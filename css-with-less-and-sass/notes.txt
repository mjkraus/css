Disadvantages of CSS

* No way to specify variables
	* values that are defined once and then re-used throughout a style sheet

* No way to define and re-use common style rules

* No way to make minor adjustments by customizing style rules with different values

* No way to perform calculation on-the-fly

* CSS syntax can get pretty unruly for non-trival sites and styles


Introduction to LESS and Sass

* Higher-level style syntaxes that provide advanced CSS features

* Complied into standard CSS before the browser renders the page

* Complied CSS files are uploaded to the production web server


What You Need For the Course

* The current versions of the LESS and Sass libraries

* For working with Sass, you need Ruby installed
	* Macs usually already have this

* For LESS, download a client-side compiler
	* SimpLESS for Mac and Windows

* Text editor

* Web server

http://lesscss.org
http://sass-lang.com
http://wearekiss.com/simpless

LESS has its own syntax

EXAMPLE
<link rel="stylesheet/less" type="text/css" href="styles.less">
	* notice the stylesheet/less fior 
<script src="../less-1.3.0.min.js"></script>


SimpLESS

* Drag and drop project files into the SimpLESS compiler
	* prefixer - automatically use vendor prefixes for the styles that it generates
		- You can turn the feature on, on an individual files bases
			- If you turn it off, it won't generate the prefixes for you
		- You can also have the code minified
			- Normally if you are deploying it to the server, you would minify to reduce download times
		- Love button - mentions SimpLESS in your source code
	* click on the refresh icons to do an initial compile of these files

* Using the SimpLESS complier you can have the code watched, so everytime you make a change to your LESS the CSS is generated for you
  you.


Using Variables in LESS 2.2

* Variables define placeholders for values that will be used in several places



Mixins 2.3

Mixins let you define common properties once, then re-use them

EXAMPLE OF A MIXIN

.commonTraits {
    border-radius: 10px;
    border: 1px solid green;
    padding: 10px;
}

header {
    color: #274D87;
    .commonTraits;
}

footer {
    color: #3264AF;
    .commonTraits;
}



Using Nest Rules

* Less lets you write nested rules that looks more like the DOM structure

EXAMPLE

.content { - parent element
	p {
		(some more styles) - these are nested inside, so they act as the child element
	}
	a {
		(yet more styles)
		&:hover { - this is the "ampersand selector." This will match up to the parent rule of this pseudo code 
					selector, so it would say a:hover)
		}
	}

}

Write your CSS rules similar to the DOM node structure, so its easier to read and its less verbose.



Using Operators
You can use operators to add to the variables that you created in LESS. Look at doc ops_styles.less to see examples


Using Mixins With Arguments in LESS 3.1
more examples in chpt3/mixargs_styles.less


* Earlier we learned how to write mixins...

EXAMPLE

@radius: 5px;
.border-radius {
	-mox-border-radius: @radius;
	-webkit-border-radius: @radius;
	-ms-border-radius: @radius;
	border-radius: @radius;
}

BUT you can pass the @radius as an argument

.border-radius (@radius) {
	-mox-border-radius: @radius;
	-webkit-border-radius: @radius;
	-ms-border-radius: @radius;
	border-radius: @radius;
}


Exploring Mixins And Pattern Matching 3.2
mixpats_styles.less
	- in this doc the color changes based on using "warning" or "error" 
	- @_ includes the properties that it has along with those of warning and error


Guarded Mixins 3.3
mixguards_styles.less
* Guarded mixins are similar to pattern matching, but they match on expressions not simple values

EXAMPLE
.text3d(@color) when (lightness(@color)| =<50%) {
	
}

* the above example is considered a Guarded Mixin because of the "when" stating that when the condition
(lightness (@color)| =<50%) is TRUE that is when the mixin will be applied.

* You can put multiple conditions in this mixin and these act as OR statements, so if any of these is evaluated to TRUE
then the mixin will be applied.












	
